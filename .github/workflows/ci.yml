name: CI/CD Pipeline

# Trigger on push to main/dev branches and pull requests
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

# Environment variables
env:
  PYTHON_VERSION: "3.9"
  CUDA_VERSION: "11.8"

jobs:
  # Lint and format check
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
          
      - name: Run Black (code formatting check)
        run: black --check --diff src/ tests/ scripts/
        
      - name: Run isort (import sorting check)
        run: isort --check-only --diff src/ tests/ scripts/
        
      - name: Run Flake8 (linting)
        run: flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Run MyPy (type checking)
        run: mypy src/ --ignore-missing-imports --no-strict-optional

  # Unit tests (CPU only)
  test-cpu:
    name: Unit Tests (CPU)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r env/requirements.txt
          
      - name: Run CPU-only tests
        run: |
          # Run tests excluding GPU-specific tests
          pytest tests/ -k "not gpu" -v --cov=src --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: cpu-tests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration tests (with GPU simulation)
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-cpu]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r env/requirements.txt
          
      - name: Run integration tests
        run: |
          # Run integration tests that don't require actual GPU
          pytest tests/ -k "integration and not gpu" -v
          
      - name: Test API endpoints
        run: |
          # Test FastAPI endpoints
          python -m pytest tests/test_api.py -v

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
          
      - name: Run Safety check
        run: safety check -r env/requirements.txt
        
      - name: Run Bandit security scan
        run: bandit -r src/ -f json -o bandit-report.json || true
        
      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Build and package test
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test-cpu]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build package
        run: python -m build
        
      - name: Check package
        run: twine check dist/*
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme myst-parser
          
      - name: Build documentation
        run: |
          cd docs
          sphinx-build -b html . _build/html
          
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Performance benchmarks (CPU only)
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r env/requirements.txt
          
      - name: Run CPU benchmarks
        run: |
          # Run CPU-only benchmarks
          python -m src.benchmarks.run_benchmark --cpu-only --output benchmark-results.json
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

  # Deployment check (staging)
  deploy-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    needs: [lint, test-cpu, test-integration, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r env/requirements.txt
          
      - name: Test deployment configuration
        run: |
          # Validate deployment configurations
          python scripts/validate_deployment.py --env staging
          
      - name: Test Docker build
        run: |
          # Test Docker image build (if Dockerfile exists)
          if [ -f Dockerfile ]; then
            docker build -t llm-inference-lab:test .
          fi

  # Notify on failure
  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    if: failure()
    needs: [lint, test-cpu, test-integration, security, build, docs]
    
    steps:
      - name: Notify failure
        run: |
          echo "CI pipeline failed. Check the logs for details."
          # Add notification logic here (Slack, email, etc.)
